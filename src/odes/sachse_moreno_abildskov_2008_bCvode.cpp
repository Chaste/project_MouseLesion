#ifdef CHASTE_CVODE
//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: sachse_model_2007
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 20279, pycml: 17739, optimize: 17739)
//! on Mon Nov 25 17:27:33 2013
//! 
//! <autogenerated>

#include "sachse_moreno_abildskov_2008_bCvode.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Get_chaste_interface__environment__fake_dt()
    {
        return var_chaste_interface__environment__fake_dt;
    }
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Get_chaste_interface__i_ionic()
    {
        return var_chaste_interface__i_ionic;
    }
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Get_chaste_interface__I_stim__I_stim()
    {
        return var_chaste_interface__I_stim__I_stim;
    }
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Get_chaste_interface__I_stim__stim_amplitude()
    {
        return var_chaste_interface__I_stim__stim_amplitude;
    }
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Get_chaste_interface__I_stim__stim_duration()
    {
        return var_chaste_interface__I_stim__stim_duration;
    }
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Get_chaste_interface__I_stim__stim_start()
    {
        return var_chaste_interface__I_stim__stim_start;
    }
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Get_chaste_interface__I_stim__stim_period()
    {
        return var_chaste_interface__I_stim__stim_period;
    }
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Get_chaste_interface__membrane__VmReal()
    {
        return var_chaste_interface__membrane__VmReal;
    }
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Get_chaste_interface__environment__time()
    {
        return var_chaste_interface__environment__time;
    }
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Get_membrane_capacitance_constant()
    {
        // Constant value given in CellML
        return NV_Ith_S(mParameters, 0);
    }
    
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Get_membrane_stimulus_current_amplitude_constant()
    {
        // Constant value given in CellML
        var_chaste_interface__I_stim__stim_amplitude = 0.001 * ((0.10000000000000001 / NV_Ith_S(mParameters, 0)) * HeartConfig::Instance()->GetCapacitance()); // uA_per_cm2
        return var_chaste_interface__I_stim__stim_amplitude;
    }
    
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Get_membrane_stimulus_current_duration_constant()
    {
        // Constant value given in CellML
        var_chaste_interface__I_stim__stim_duration = 1.0; // millisecond
        return var_chaste_interface__I_stim__stim_duration;
    }
    
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Get_membrane_stimulus_current_offset_constant()
    {
        // Constant value given in CellML
        var_chaste_interface__I_stim__stim_start = 100.0; // millisecond
        return var_chaste_interface__I_stim__stim_start;
    }
    
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Get_membrane_stimulus_current_period_constant()
    {
        // Constant value given in CellML
        var_chaste_interface__I_stim__stim_period = 1000.0; // millisecond
        return var_chaste_interface__I_stim__stim_period;
    }
    
    
    boost::shared_ptr<RegularStimulus> Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        var_chaste_interface__I_stim__stim_start = 100.0; // millisecond
        var_chaste_interface__I_stim__stim_period = 1000.0; // millisecond
        var_chaste_interface__I_stim__stim_duration = 1.0; // millisecond
        var_chaste_interface__I_stim__stim_amplitude = 0.001 * ((0.10000000000000001 / NV_Ith_S(mParameters, 0)) * HeartConfig::Instance()->GetCapacitance()); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__I_stim__stim_amplitude),
                var_chaste_interface__I_stim__stim_duration,
                var_chaste_interface__I_stim__stim_period,
                var_chaste_interface__I_stim__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::Cellsachse_moreno_abildskov_2008_bFromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                7,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Cellsachse_moreno_abildskov_2008_bFromCellMLCvode>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        NV_Ith_S(this->mParameters, 0) = 4.5e-6; // (c,membrane__Cm) [microfarad]
        mUseAnalyticJacobian = true;
    }
    
    Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::~Cellsachse_moreno_abildskov_2008_bFromCellMLCvode()
    {
    }
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        
        double var_chaste_interface__membrane__VmReal = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -58.00
        double var_chaste_interface__I_Shkr__OShkrReal = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0
        
        const double var_membrane__Vm = (fabs(var_chaste_interface__membrane__VmReal) < 9.9999999999999995e-08) ? 9.9999999999999995e-08 : var_chaste_interface__membrane__VmReal; // millivolt
        const double var_I_b__I_b = 6.9e-06 * (var_membrane__Vm - 0.0); // nanoampere
        const double var_I_Kir__I_Kir = (1.0 / (0.93999999999999995 + exp(((var_membrane__Vm -  -84.65008027429019) * 121590.0) * 4.0792184217503928e-07))) * (var_membrane__Vm -  -84.65008027429019) * 7.0710678118654754e-05; // nanoampere
        const double var_I_Shkr__OShkr = (var_chaste_interface__I_Shkr__OShkrReal < 0.0) ? 0.0 : (var_chaste_interface__I_Shkr__OShkrReal > 1.0) ? 1.0 : var_chaste_interface__I_Shkr__OShkrReal; // dimensionless
        const double var_I_Shkr__I_Shkr = (((var_I_Shkr__OShkr * var_membrane__Vm * 50.286150000000006) * 4.0792184217503928e-07) * (140.0 - (5.0 * exp(((-var_membrane__Vm) * 96500.0) * 4.0792184217503928e-07)))) / (1.0 - exp(((-var_membrane__Vm) * 96500.0) * 4.0792184217503928e-07)); // nanoampere
        var_chaste_interface__i_ionic = 0.001 * (((var_I_Kir__I_Kir + var_I_Shkr__I_Shkr + var_I_b__I_b) / NV_Ith_S(mParameters, 0)) * HeartConfig::Instance()->GetCapacitance()); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__VmReal = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -58.00
        double var_chaste_interface__I_Shkr__C0ShkrReal = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 9.11e-1
        double var_chaste_interface__I_Shkr__C1ShkrReal = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 8.57e-2
        double var_chaste_interface__I_Shkr__C2ShkrReal = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 3.02e-3
        double var_chaste_interface__I_Shkr__C3ShkrReal = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 4.74e-5
        double var_chaste_interface__I_Shkr__C4ShkrReal = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 2.79e-7
        double var_chaste_interface__I_Shkr__OShkrReal = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0
        
        
        // Mathematics
        double d_dt_chaste_interface__membrane__VmReal;
        const double var_membrane__Vm = (fabs(var_chaste_interface__membrane__VmReal) < 9.9999999999999995e-08) ? 9.9999999999999995e-08 : var_chaste_interface__membrane__VmReal; // millivolt
        const double var_I_Shkr__OShkr = (var_chaste_interface__I_Shkr__OShkrReal < 0.0) ? 0.0 : (var_chaste_interface__I_Shkr__OShkrReal > 1.0) ? 1.0 : var_chaste_interface__I_Shkr__OShkrReal; // dimensionless
        const double var_I_Shkr__C0Shkr = (var_chaste_interface__I_Shkr__C0ShkrReal < 0.0) ? 0.0 : (var_chaste_interface__I_Shkr__C0ShkrReal > 1.0) ? 1.0 : var_chaste_interface__I_Shkr__C0ShkrReal; // dimensionless
        const double var_I_Shkr__C1Shkr = (var_chaste_interface__I_Shkr__C1ShkrReal < 0.0) ? 0.0 : (var_chaste_interface__I_Shkr__C1ShkrReal > 1.0) ? 1.0 : var_chaste_interface__I_Shkr__C1ShkrReal; // dimensionless
        const double var_I_Shkr__C2Shkr = (var_chaste_interface__I_Shkr__C2ShkrReal < 0.0) ? 0.0 : (var_chaste_interface__I_Shkr__C2ShkrReal > 1.0) ? 1.0 : var_chaste_interface__I_Shkr__C2ShkrReal; // dimensionless
        const double var_I_Shkr__C3Shkr = (var_chaste_interface__I_Shkr__C3ShkrReal < 0.0) ? 0.0 : (var_chaste_interface__I_Shkr__C3ShkrReal > 1.0) ? 1.0 : var_chaste_interface__I_Shkr__C3ShkrReal; // dimensionless
        const double var_I_Shkr__C4Shkr = (var_chaste_interface__I_Shkr__C4ShkrReal < 0.0) ? 0.0 : (var_chaste_interface__I_Shkr__C4ShkrReal > 1.0) ? 1.0 : var_chaste_interface__I_Shkr__C4ShkrReal; // dimensionless
        const double var_I_Shkr__kv = 30.0 * exp((var_membrane__Vm * 123520.0) * 4.0792184217503928e-07); // first_order_rate_constant
        const double var_I_Shkr__k_v = 2.0 * exp((var_membrane__Vm *  -147645.0) * 4.0792184217503928e-07); // first_order_rate_constant
        const double d_dt_chaste_interface__I_Shkr__C0ShkrReal = 0.001 * ((var_I_Shkr__k_v * var_I_Shkr__C1Shkr) - (4.0 * var_I_Shkr__kv * var_I_Shkr__C0Shkr)); // 'per millisecond'
        const double d_dt_chaste_interface__I_Shkr__C1ShkrReal = 0.001 * (((2.0 * var_I_Shkr__k_v * var_I_Shkr__C2Shkr) + (4.0 * var_I_Shkr__kv * var_I_Shkr__C0Shkr)) - (((3.0 * var_I_Shkr__kv) + var_I_Shkr__k_v) * var_I_Shkr__C1Shkr)); // 'per millisecond'
        const double d_dt_chaste_interface__I_Shkr__C2ShkrReal = 0.001 * (((3.0 * var_I_Shkr__k_v * var_I_Shkr__C3Shkr) + (3.0 * var_I_Shkr__kv * var_I_Shkr__C1Shkr)) - (((2.0 * var_I_Shkr__kv) + (2.0 * var_I_Shkr__k_v)) * var_I_Shkr__C2Shkr)); // 'per millisecond'
        const double d_dt_chaste_interface__I_Shkr__C3ShkrReal = 0.001 * (((4.0 * var_I_Shkr__k_v * var_I_Shkr__C4Shkr) + (2.0 * var_I_Shkr__kv * var_I_Shkr__C2Shkr)) - ((var_I_Shkr__kv + (3.0 * var_I_Shkr__k_v)) * var_I_Shkr__C3Shkr)); // 'per millisecond'
        const double d_dt_chaste_interface__I_Shkr__C4ShkrReal = 0.001 * (((18.0 * var_I_Shkr__OShkr) + (var_I_Shkr__kv * var_I_Shkr__C3Shkr)) - ((77.0 + (4.0 * var_I_Shkr__k_v)) * var_I_Shkr__C4Shkr)); // 'per millisecond'
        const double d_dt_chaste_interface__I_Shkr__OShkrReal = 0.001 * ((77.0 * var_I_Shkr__C4Shkr) - (18.0 * var_I_Shkr__OShkr)); // 'per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__VmReal = 0.0;
        }
        else
        {
            const double var_I_b__I_b = 6.9e-06 * (var_membrane__Vm - 0.0); // nanoampere
            const double var_I_Kir__I_Kir = (1.0 / (0.93999999999999995 + exp(((var_membrane__Vm -  -84.65008027429019) * 121590.0) * 4.0792184217503928e-07))) * (var_membrane__Vm -  -84.65008027429019) * 7.0710678118654754e-05; // nanoampere
            const double var_I_Shkr__I_Shkr = (((var_I_Shkr__OShkr * var_membrane__Vm * 50.286150000000006) * 4.0792184217503928e-07) * (140.0 - (5.0 * exp(((-var_membrane__Vm) * 96500.0) * 4.0792184217503928e-07)))) / (1.0 - exp(((-var_membrane__Vm) * 96500.0) * 4.0792184217503928e-07)); // nanoampere
            var_chaste_interface__I_stim__I_stim = -GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
            d_dt_chaste_interface__membrane__VmReal = 0.001 * ((-((var_I_Kir__I_Kir + var_I_Shkr__I_Shkr + var_I_b__I_b) - (1000.0 * ((var_chaste_interface__I_stim__I_stim * NV_Ith_S(mParameters, 0)) / HeartConfig::Instance()->GetCapacitance())))) / NV_Ith_S(mParameters, 0)); // 'millivolt per millisecond'
        }
        
        NV_Ith_S(rDY, 0) = d_dt_chaste_interface__membrane__VmReal;
        NV_Ith_S(rDY, 1) = d_dt_chaste_interface__I_Shkr__C0ShkrReal;
        NV_Ith_S(rDY, 2) = d_dt_chaste_interface__I_Shkr__C1ShkrReal;
        NV_Ith_S(rDY, 3) = d_dt_chaste_interface__I_Shkr__C2ShkrReal;
        NV_Ith_S(rDY, 4) = d_dt_chaste_interface__I_Shkr__C3ShkrReal;
        NV_Ith_S(rDY, 5) = d_dt_chaste_interface__I_Shkr__C4ShkrReal;
        NV_Ith_S(rDY, 6) = d_dt_chaste_interface__I_Shkr__OShkrReal;
    }
    
    void Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::EvaluateAnalyticJacobian(long int N, double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__VmReal = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -58.00
        double var_chaste_interface__I_Shkr__C0ShkrReal = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 9.11e-1
        double var_chaste_interface__I_Shkr__C1ShkrReal = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 8.57e-2
        double var_chaste_interface__I_Shkr__C2ShkrReal = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 3.02e-3
        double var_chaste_interface__I_Shkr__C3ShkrReal = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 4.74e-5
        double var_chaste_interface__I_Shkr__C4ShkrReal = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 2.79e-7
        double var_chaste_interface__I_Shkr__OShkrReal = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0
        
        var_chaste_interface__environment__fake_dt = 0.001; // second
        const double var_t3 = (fabs(var_chaste_interface__membrane__VmReal) < 9.9999999999999995e-08) ? 9.9999999999999995e-08 : var_chaste_interface__membrane__VmReal; // dimensionless
        const double var_t11 = var_t3 -  -84.65008027429019; // dimensionless
        const double var_t18 = exp((1.26 * var_t11) * 0.039364457769891281); // dimensionless
        const double var_t19 = 0.93999999999999995 + var_t18; // dimensionless
        const double var_t32 = (var_chaste_interface__membrane__VmReal <=  -9.9999999999999995e-08) ? 1.0 : (var_chaste_interface__membrane__VmReal <= 9.9999999999999995e-08) ? 0.0 : (9.9999999999999995e-08 < var_chaste_interface__membrane__VmReal) ? 1.0 : NAN; // dimensionless
        const double var_t45 = 1.0 < var_chaste_interface__I_Shkr__OShkrReal; // dimensionless
        const double var_t47 = 5.4000000000000004e-09 * ((var_chaste_interface__I_Shkr__OShkrReal < 0.0) ? 0.0 : var_t45 ? 1.0 : var_chaste_interface__I_Shkr__OShkrReal); // dimensionless
        const double var_t53 = exp(((-var_t3) * 96500.0) * 4.0792184217503923e-07); // dimensionless
        const double var_t55 = 140.0 - (5.0 * var_t53); // dimensionless
        const double var_t56 = 1.0 - var_t53; // dimensionless
        const double var_t57 = 1.0 / var_t56; // dimensionless
        const double var_t58 = var_t55 * var_t57; // dimensionless
        const double var_t66 = (((var_t47 * var_t3) * 9312250000.0) * 96500.0) * 1.4480979956875641e-08; // dimensionless
        const double var_t83 = 1.0 / NV_Ith_S(mParameters, 0); // dimensionless
        const double var_t88 = (var_chaste_interface__I_Shkr__OShkrReal <= 0.0) ? 0.0 : (var_chaste_interface__I_Shkr__OShkrReal <= 1.0) ? 1.0 : var_t45 ? 0.0 : NAN; // dimensionless
        const double var_t95 = 2.0 * var_t32; // dimensionless
        const double var_t97 = (var_t95 *  -1.53) * 96500.0; // dimensionless
        const double var_t100 = exp((var_t3 *  -1.53) * 0.039364457769891281); // dimensionless
        const double var_t102 = 1.0 < var_chaste_interface__I_Shkr__C1ShkrReal; // dimensionless
        const double var_t103 = (var_chaste_interface__I_Shkr__C1ShkrReal < 0.0) ? 0.0 : var_t102 ? 1.0 : var_chaste_interface__I_Shkr__C1ShkrReal; // dimensionless
        const double var_t107 = 30.0 * var_t32; // dimensionless
        const double var_t109 = (var_t107 * 1.28) * 96500.0; // dimensionless
        const double var_t112 = exp((var_t3 * 1.28) * 0.039364457769891281); // dimensionless
        const double var_t114 = 1.0 < var_chaste_interface__I_Shkr__C0ShkrReal; // dimensionless
        const double var_t119 = (((4.0 * var_t109) * 4.0792184217503923e-07) * var_t112) * ((var_chaste_interface__I_Shkr__C0ShkrReal < 0.0) ? 0.0 : var_t114 ? 1.0 : var_chaste_interface__I_Shkr__C0ShkrReal); // dimensionless
        const double var_t121 = 30.0 * var_t112; // dimensionless
        const double var_t127 = (4.0 * var_t121) * ((var_chaste_interface__I_Shkr__C0ShkrReal <= 0.0) ? 0.0 : (var_chaste_interface__I_Shkr__C0ShkrReal <= 1.0) ? 1.0 : var_t114 ? 0.0 : NAN); // dimensionless
        const double var_t128 = 2.0 * var_t100; // dimensionless
        const double var_t132 = (var_chaste_interface__I_Shkr__C1ShkrReal <= 0.0) ? 0.0 : (var_chaste_interface__I_Shkr__C1ShkrReal <= 1.0) ? 1.0 : var_t102 ? 0.0 : NAN; // dimensionless
        const double var_t135 = 1.0 < var_chaste_interface__I_Shkr__C2ShkrReal; // dimensionless
        const double var_t136 = (var_chaste_interface__I_Shkr__C2ShkrReal < 0.0) ? 0.0 : var_t135 ? 1.0 : var_chaste_interface__I_Shkr__C2ShkrReal; // dimensionless
        const double var_t144 = (((var_t107 * 1.28) * 11.612515042117929) * 0.0033898305084745762) * var_t112; // dimensionless
        const double var_t149 = (((var_t95 *  -1.53) * 11.612515042117929) * 0.0033898305084745762) * var_t100; // dimensionless
        const double var_t159 = (var_chaste_interface__I_Shkr__C2ShkrReal <= 0.0) ? 0.0 : (var_chaste_interface__I_Shkr__C2ShkrReal <= 1.0) ? 1.0 : var_t135 ? 0.0 : NAN; // dimensionless
        const double var_t163 = 1.0 < var_chaste_interface__I_Shkr__C3ShkrReal; // dimensionless
        const double var_t164 = (var_chaste_interface__I_Shkr__C3ShkrReal < 0.0) ? 0.0 : var_t163 ? 1.0 : var_chaste_interface__I_Shkr__C3ShkrReal; // dimensionless
        const double var_t183 = (var_chaste_interface__I_Shkr__C3ShkrReal <= 0.0) ? 0.0 : (var_chaste_interface__I_Shkr__C3ShkrReal <= 1.0) ? 1.0 : var_t163 ? 0.0 : NAN; // dimensionless
        const double var_t187 = 1.0 < var_chaste_interface__I_Shkr__C4ShkrReal; // dimensionless
        const double var_t192 = (((4.0 * var_t97) * 4.0792184217503923e-07) * var_t100) * ((var_chaste_interface__I_Shkr__C4ShkrReal < 0.0) ? 0.0 : var_t187 ? 1.0 : var_chaste_interface__I_Shkr__C4ShkrReal); // dimensionless
        const double var_t209 = (var_chaste_interface__I_Shkr__C4ShkrReal <= 0.0) ? 0.0 : (var_chaste_interface__I_Shkr__C4ShkrReal <= 1.0) ? 1.0 : var_t187 ? 0.0 : NAN; // dimensionless
        const double var_t220 = 18.0 * var_t88; // dimensionless
        
        // Matrix entries
        DENSE_ELEM(rJacobian, 0, 0) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((((((((((((3.1622776600000002e-05 / pow(var_t19, 2.0)) * 2.2360679774997898) * var_t11) * 1.26) * var_t32) * 96500.0) * 4.0792184217503923e-07) * var_t18) - (((3.1622776600000002e-05 / var_t19) * 2.2360679774997898) * var_t32)) - ((((var_t47 * var_t32) * 9312250000.0) * 4.0792184217503923e-07) * var_t58)) - (((((var_t66 * 1.1490950876185005e-05) * 5.0) * var_t32) * var_t53) * var_t57)) + (((((var_t66 * 1.1490950876185005e-05) * var_t55) / pow(var_t56, 2.0)) * var_t32) * var_t53)) - (6.9e-06 * var_t32)) * var_t83));
        DENSE_ELEM(rJacobian, 1, 0) = var_chaste_interface__environment__fake_dt * ((((var_t97 * 4.0792184217503923e-07) * var_t100) * var_t103) - var_t119);
        DENSE_ELEM(rJacobian, 2, 0) = var_chaste_interface__environment__fake_dt * ((((((2.0 * var_t97) * 4.0792184217503923e-07) * var_t100) * var_t136) + var_t119) - (((3.0 * var_t144) + var_t149) * var_t103));
        DENSE_ELEM(rJacobian, 3, 0) = var_chaste_interface__environment__fake_dt * ((((((3.0 * var_t97) * 4.0792184217503923e-07) * var_t100) * var_t164) + ((((3.0 * var_t109) * 4.0792184217503923e-07) * var_t112) * var_t103)) - ((2.0 * (var_t144 + var_t149)) * var_t136));
        DENSE_ELEM(rJacobian, 4, 0) = var_chaste_interface__environment__fake_dt * ((var_t192 + ((((2.0 * var_t109) * 4.0792184217503923e-07) * var_t112) * var_t136)) - ((var_t144 + (3.0 * var_t149)) * var_t164));
        DENSE_ELEM(rJacobian, 5, 0) = var_chaste_interface__environment__fake_dt * ((((var_t109 * 4.0792184217503923e-07) * var_t112) * var_t164) - var_t192);
        DENSE_ELEM(rJacobian, 1, 1) = var_chaste_interface__environment__fake_dt * (-var_t127);
        DENSE_ELEM(rJacobian, 2, 1) = var_chaste_interface__environment__fake_dt * (var_t127);
        DENSE_ELEM(rJacobian, 1, 2) = var_chaste_interface__environment__fake_dt * (var_t128 * var_t132);
        DENSE_ELEM(rJacobian, 2, 2) = var_chaste_interface__environment__fake_dt * ((-((3.0 * var_t121) + var_t128)) * var_t132);
        DENSE_ELEM(rJacobian, 3, 2) = var_chaste_interface__environment__fake_dt * ((3.0 * var_t121) * var_t132);
        DENSE_ELEM(rJacobian, 2, 3) = var_chaste_interface__environment__fake_dt * ((2.0 * var_t128) * var_t159);
        DENSE_ELEM(rJacobian, 3, 3) = var_chaste_interface__environment__fake_dt * (( -2.0 * (var_t121 + var_t128)) * var_t159);
        DENSE_ELEM(rJacobian, 4, 3) = var_chaste_interface__environment__fake_dt * ((2.0 * var_t121) * var_t159);
        DENSE_ELEM(rJacobian, 3, 4) = var_chaste_interface__environment__fake_dt * ((3.0 * var_t128) * var_t183);
        DENSE_ELEM(rJacobian, 4, 4) = var_chaste_interface__environment__fake_dt * ((-(var_t121 + (3.0 * var_t128))) * var_t183);
        DENSE_ELEM(rJacobian, 5, 4) = var_chaste_interface__environment__fake_dt * (var_t121 * var_t183);
        DENSE_ELEM(rJacobian, 4, 5) = var_chaste_interface__environment__fake_dt * ((4.0 * var_t128) * var_t209);
        DENSE_ELEM(rJacobian, 5, 5) = var_chaste_interface__environment__fake_dt * ((-(77.0 + (4.0 * var_t128))) * var_t209);
        DENSE_ELEM(rJacobian, 6, 5) = var_chaste_interface__environment__fake_dt * (77.0 * var_t209);
        DENSE_ELEM(rJacobian, 0, 6) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((((( -5.4000000000000004e-09 * var_t88) * var_t3) * 9312250000.0) * 4.0792184217503923e-07) * var_t58) * var_t83));
        DENSE_ELEM(rJacobian, 5, 6) = var_chaste_interface__environment__fake_dt * (var_t220);
        DENSE_ELEM(rJacobian, 6, 6) = var_chaste_interface__environment__fake_dt * (-var_t220);
    }
    
    N_Vector Cellsachse_moreno_abildskov_2008_bFromCellMLCvode::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        
        
        // Mathematics
        var_chaste_interface__I_stim__I_stim = -GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        
        N_Vector dqs = N_VNew_Serial(2);
        NV_Ith_S(dqs, 0) = var_chaste_interface__I_stim__I_stim;
        NV_Ith_S(dqs, 1) = var_chaste_interface__environment__time;
        return dqs;
    }
    
template<>
void OdeSystemInformation<Cellsachse_moreno_abildskov_2008_bFromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "sachse_model_2007";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-58.00);

    this->mVariableNames.push_back("I_Shkr__C0ShkrReal");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(9.11e-1);

    this->mVariableNames.push_back("I_Shkr__C1ShkrReal");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.57e-2);

    this->mVariableNames.push_back("I_Shkr__C2ShkrReal");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.02e-3);

    this->mVariableNames.push_back("I_Shkr__C3ShkrReal");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(4.74e-5);

    this->mVariableNames.push_back("I_Shkr__C4ShkrReal");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.79e-7);

    this->mVariableNames.push_back("I_Shkr__OShkrReal");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("microfarad");
    
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");
    
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellsachse_moreno_abildskov_2008_bFromCellMLCvode)
#endif // CHASTE_CVODE
